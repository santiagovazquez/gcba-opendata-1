<% url = Parcelas::Application.routes.url_helpers %>
var Map = (function () {

    var mapObject,
        buenosAiresLocation = new google.maps.LatLng(window.bsasApp.lat, window.bsasApp.long),
        searchLimit = 200,
        resultBounds,
        getEndpointWithQuery,
        drawParcelasOverGoogleMap,
        parcelaClicked,
        mapViewPortChanged,
        getParcelaLatLong,
        showParcelaInfoBox,
        removeOpenedInfobox,
        showSearchInfobox,
        createInfoboxWithHTML,
        emptyParcelaClicked,
        createGoogleLatLong,
        createMap,
        updateViewport,
        removePreviousDrawing,
        getInfoMessageForQuery,
        removeOpenedMarker,
        createSearchMarker,
        dropFocusFromSelectParcel,
        setFocusToParcel,
        clickedElement,
        temporalMarker,
        searchMarker,
        openedBox,
        currentZoomLevel = 12,
        idleSkipped = false,
        isMapDragging = false,
        getIdleSkipped,
        setIdleSkipped,
        getIsMapDragging,
        setIsMapDragging,
        getMapCenter,
        getCurrentZoomLevel,
        setCurrentZoomLevel,
        shiftPressed = false;

    getEndpointWithQuery = function (query, isNearby, lat, long) {
        var finalLat, finalLong, url;

        if (isNearby && typeof (temporalMarker) !== 'undefined') {
            finalLat = temporalMarker.getPosition().lat();
            finalLong = temporalMarker.getPosition().lng();
        } else {
            finalLat = lat;
            finalLong = long;
        }

        url = '<%= url.pcercanas_json_path(:limit => '__limit') %>';
        url = url.replace('__limit', searchLimit);

        return url + '?lat=' + finalLat + '&long=' + finalLong + '&category=' + encodeURIComponent(query) + '&conv=' + !isNearby;
    };

    showSearchInfobox = function (latLong) {
        var html = _.template($("#location-search-box-template").html())();

        removeOpenedInfobox();
        createInfoboxWithHTML(html, latLong);
    };

    removeOpenedMarker = function (marker) {
        if (typeof (marker) !== 'undefined') {
            marker.setMap(null);
        }
    };

    removeOpenedInfobox = function (undefined) {
        removeOpenedMarker(temporalMarker);

        if (typeof (openedBox) !== 'undefined') {
            openedBox.close();
        }

        dropFocusFromSelectParcel();
    };

    // recives an undefined parameter to reset the value of the current click element
    dropFocusFromSelectParcel = function (undef) {
        if (typeof (clickedElement) !== 'undefined' && clickedElement !== null) {
            clickedElement.classed('clicked', false);
            clickedElement = undef;
        }
    };

    showParcelaInfoBox = function (parcelas, latLong) {
        var template, sanitazedItems, html;

        removeOpenedInfobox();

        template = $("#parcela_template").html();

        sanitazedItems = _.map(parcelas.properties.parcelas_data, function(item){
            var newParcela = cloneParcela(item);
            newParcela.smp = newParcela.smp.substring(1);
            return newParcela;
        });

        html = _.template(template, {items: sanitazedItems});

        createInfoboxWithHTML(html, latLong);
    };

    createInfoboxWithHTML = function (html, latLong) {
        var boxText, myOptions;

        boxText = document.createElement("div");
        boxText.style.cssText = "border: 1px solid black; margin-top: 8px; background: white; padding: 5px;";
        boxText.innerHTML = html;

        temporalMarker = new google.maps.Marker({
            map: mapObject,
            position: latLong,
            visible: false
        });

        myOptions = {
            content: boxText,
            maxWidth: 800,
            pixelOffset: new google.maps.Size(-140, 0),
            zIndex: null,
            boxStyle: {
                background: "url('assets/infoBox/tipbox.gif') no-repeat",
                opacity: 0.85,
                width: "500px"
            },
            closeBoxURL: "assets/infoBox/close.gif",
            infoBoxClearance: new google.maps.Size(1, 1),
            isHidden: false,
            pane: "floatPane",
            enableEventPropagation: false,
            closeHandler: dropFocusFromSelectParcel,
            closeBoxMargin: "20px 10px 10px"
        };

        openedBox = new InfoBox(myOptions);
        openedBox.open(mapObject, temporalMarker);

        google.maps.event.addListener(openedBox, 'domready', function() {
            $("a.carousel-control.left").click(function() {
                $("#parcela-carousel").carousel("prev");
            });
            $("a.carousel-control.right").click(function() {
                $("#parcela-carousel").carousel("next");
            });

            Searchbox.registerLocationSearchHandlers();
        });
    };

    createSearchMarker = function (data, isNearbyQuery) {
        var position;

        if (isNearbyQuery && typeof (temporalMarker) !== 'undefined') {
            position = temporalMarker.getPosition();
        } else {
            position = new google.maps.LatLng(data.lat, data.long);
        }

        searchMarker = new google.maps.Marker({
            map: mapObject,
            position: position,
            zIndex: 150
        });

    };

    emptyParcelaClicked = function (point) {
        showSearchInfobox(createGoogleLatLong(point.lat(), point.lng()));
    };

    parcelaClicked = function (parcela) {

        if (parcela.properties.parcelas_data.length === 0) {
            return;
        }

        dropFocusFromSelectParcel();
        showParcelaInfoBox(parcela, getParcelaLatLong(parcela));

        setFocusToParcel(this);

        d3.event.stopPropagation();
    };

    setFocusToParcel = function (d3Parcel) {
        clickedElement = d3.select(d3Parcel);
        clickedElement.classed('clicked', true);
    };

    createGoogleLatLong = function (lat, long) {
        return new google.maps.LatLng(lat, long);
    };

    getParcelaLatLong = function (parcela) {
        return createGoogleLatLong(parcela.geometry.coordinates[0][0][0][1], parcela.geometry.coordinates[0][0][0][0] - 0.0006);
    };

    createMap = function () {
        var $map = $("#map");

        mapObject = new google.maps.Map($map[0], {
            zoom: getCurrentZoomLevel(),
            minZoom: 12,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            center: getMapCenter(),
            styles: [{"stylers": [{"saturation": -75}, {"lightness": 75}]}],
            mapTypeControl: false,
            scaleControl: false,
            streetViewControl: false,
            overviewMapControl: false
        });

        google.maps.event.addListener(mapObject, 'idle', function () {
            if (getIsMapDragging()) {
                setIdleSkipped(true);
                return;
            }

            setIdleSkipped(false);
            mapViewPortChanged(mapObject);
        });

        google.maps.event.addListener(mapObject, 'dragstart', function () {
            setIsMapDragging(true);
        });

        google.maps.event.addListener(mapObject, 'dragend', function () {
            setIsMapDragging(false);
            if (getIdleSkipped() === true) {

                mapViewPortChanged(mapObject);
                setIdleSkipped(false);
            }
        });

        google.maps.event.addListener(mapObject, 'bounds_changed', function () {
            setIdleSkipped(false);
        });


        google.maps.event.addDomListener(mapObject, 'click', function (data) {
            removeOpenedInfobox();

            if (shiftPressed) {
                emptyParcelaClicked(data.latLng);
            }
        });
    };

    drawParcelasOverGoogleMap = function (data, isNearbyQuery) {
        var geoJson, overlay, points;

        geoJson = data.geojson;
        overlay = new google.maps.OverlayView();

        overlay.onAdd = function () {
            var layer, svg, adminDivisions;
            layer = d3.select(this.getPanes().overlayMouseTarget).append("div").attr("class", "SvgOverlay");
            svg = layer.append("svg");
            adminDivisions = svg.append("g").attr("class", "AdminDivisions");
        };

        resultBounds = new google.maps.LatLngBounds();

        points = _(geoJson.features).chain().pluck('geometry').compact().pluck('coordinates')
                .flatten(true).flatten(true).flatten(true).map(function (val) {
                return new google.maps.LatLng(val[1] + 0.0005, val[0] - 0.0006);
            }).value();

        _(points).each(function (e) {
            resultBounds.extend(e);
        });

        overlay.draw = function () {
            var path, adminDivisions, markerOverlay, overlayProjection;

            markerOverlay = this;
            overlayProjection = markerOverlay.getProjection();

            // Turn the overlay projection into a d3 projection
            var googleMapProjection = function (coordinates) {
                var googleCoordinates = new google.maps.LatLng(coordinates[1] + 0.0005, coordinates[0] - 0.0006);
                var pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
                return [pixelCoordinates.x + 4000, pixelCoordinates.y + 4000];
            };

            adminDivisions = d3.select('g');

            path = d3.geo.path().projection(googleMapProjection);
            adminDivisions.selectAll("path")
                .data(geoJson.features)
                .attr("d", path) // update existing paths
                .enter().append("svg:path")
                .attr("class", function (d) {
                    if (d.properties.parcelas_data.length === 1 && (d.properties.parcelas_data[0].tipo2 === 'ESPACIO VERDE' || d.properties.parcelas_data[0].tipo2 === 'PLAZA')) {
                        return "parcel espacio-verde";
                    } else if (d.properties.parcelas_data.length === 0) {
                        return "parcel-not-clickeable";
                    }
                    return "parcel";
                })
                .attr("d", path)
                .on("click", parcelaClicked)
                .style("opacity", 0.1)
                .transition()
                .delay(function (d, i) { return 4000 * Math.random(); })
                .style("opacity", 1);
        };

        removeOpenedMarker(searchMarker);
        createSearchMarker(data, isNearbyQuery);

        overlay.onRemove = removePreviousDrawing;

        mapObject.fitBounds(resultBounds);
        overlay.setMap(mapObject);
        google.maps.event.trigger(mapObject, 'resize');
    };

    mapViewPortChanged = function (map) {
        var zoomLevel = map.getZoom();
        setCurrentZoomLevel(zoomLevel);
    };

    setCurrentZoomLevel = function (zoomLevel) {
        currentZoomLevel = zoomLevel;
    };

    getCurrentZoomLevel = function () {
        return currentZoomLevel;
    };

    getIdleSkipped = function () {
        return idleSkipped;
    };

    setIdleSkipped = function (value) {
        idleSkipped = value;
    };

    getIsMapDragging = function () {
        return isMapDragging;
    };

    setIsMapDragging = function (value) {
        isMapDragging = value;
    };

    getMapCenter = function () {
        return buenosAiresLocation;
    };

    removePreviousDrawing = function () {
        $(".SvgOverlay").remove();
    };

    getInfoMessageForQuery = function (query, count) {
        var plural, resultCount, message;

        plural = (count === 1 ? '' : 's');
        resultCount = (count === searchLimit ? 'Limitando resultados a ' + searchLimit + '.' :
                'Mostrando ' + count + ' resultado' + plural + '.');

        if (query.length > 0) {
            message = 'Se muestran resultados para la búsqueda "' + query + '". ';
            return message + resultCount;
        }

        // if the query is empty, a discovery query was perform. show the status message accordingly.
        return "Descubriendo parcelas. " + resultCount;
    };

    updateViewport = function(data, query, isNearbyQuery){
        removePreviousDrawing();

        var resultCount = data.geojson.features.length;

        if (resultCount === 0) {
            StatusBar.showErrorMessage('No hubo resultados para la búsqueda "' + query + '"');
        } else {
            drawParcelasOverGoogleMap(data, isNearbyQuery);
            StatusBar.showInfoMessage(getInfoMessageForQuery(query, resultCount));
        }

        removeOpenedInfobox();

        $("#loading").hide();
        $('.navbar-search').show();
    };

    return {
        init : function () {
            if (mapObject === undefined) {
                createMap();
                this.search(window.bsasApp.cat, true, window.bsasApp.lat, window.bsasApp.long);
            }

            $(window).keydown(function (evt) {
                if (evt.which === 16) { // shift
                    shiftPressed = true;
                }
            }).keyup(function (evt) {
                if (evt.which === 16) { // shift
                    shiftPressed = false;
                }
            });

        },

        search : function (query, isNearbyQuery, lat, long, mustConvert) {
            var endpoint = getEndpointWithQuery(query, isNearbyQuery, lat, long);
            $("#loading").show();

            // the z-index of the loader is not enough to be on the top of everything
            // because this component has the focus
            $('.navbar-search').hide();

            $.getJSON(endpoint, function (data) {
                updateViewport(data, query, isNearbyQuery);
            });
        }
    };
}());

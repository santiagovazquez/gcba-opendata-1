<% url = Parcelas::Application.routes.url_helpers %>

var Map = function(){

    var buenosAiresLocation = new google.maps.LatLng(-34.61997232, -58.45);

    var parcelasEndpoint,
        getGeoAddress,
        doDrawParcelasOverGoogleMap,
        drawParcelasOverGoogleMap,
        parcelaClicked,
        mapViewPortChanged,
        getParcelaLatLong,
        showParcelaInfoBox,
        removeOpenedInfobox,
        showSearchInfobox,
        createInfoboxWithHTML,
        emptyParcelaClicked;

    var canvasWidth = 960,
        canvasHeight = 500,
        centered;

    var clickedElement,
        temporalMarker,
        openedBox;

    var currentZoomLevel = 14,
        currentMapCenter = buenosAiresLocation;

    var idleSkipped = false,
        isMapDragging = false,
        rendering = false;

    var getIdleSkipped,
        setIdleSkipped,
        getIsMapDragging,
        setIsMapDragging,
        getMapCenter,
        setCurrentMapCenter,
        getCurrentMapCenter,
        getCurrentZoomLevel,
        setCurrentZoomLevel,
        setIsRendering,
        getIsRendering;

    setIsRendering = function(isRendering){
        rendering = isRendering;
    }

    getIsRendering = function(){
        return rendering;
    }

    parcelasEndpoint = function(){
       var url = '<%= url.pcercanas_json_path(:category => 'lavadero de ropa') %>';
       return url + '?lat=' + getCurrentMapCenter().lat() + '&long=' + getCurrentMapCenter().lng();
    }

    showSearchInfobox = function(latLong){
        var html = _.template($("#location-search-box-template").html());

        removeOpenedInfobox();
        createInfoboxWithHTML(html, latLong);
    }

    removeOpenedInfobox = function(){
        if(typeof(temporalMarker) !== 'undefined'){
            temporalMarker.setMap(null);
        }

        if(typeof(openedBox) !== 'undefined'){
            openedBox.close();
        }
    }

    showParcelaInfoBox = function(parcelas, latLong){
        removeOpenedInfobox();

        var template = $("#parcela_template").html();

        var sanitazedItems = _.map(parcelas.properties.parcelas_data, function(item){
            var newParcela = cloneParcela(item);
            newParcela.smp = newParcela.smp.substring(1);
            return newParcela;
        });

        var html = _.template(template, {items: sanitazedItems});

        createInfoboxWithHTML(html, latLong);
    }

    createInfoboxWithHTML = function(html, latLong) {
        var boxText = document.createElement("div");
        boxText.style.cssText = "border: 1px solid black; margin-top: 8px; background: white; padding: 5px;";
        boxText.innerHTML = html;

        var temporalMarker = new google.maps.Marker({
            map: window.__map,
            position: latLong,
            visible: false
        });

        var myOptions = {
            content: boxText,
            maxWidth: 800,
            pixelOffset: new google.maps.Size(-140, 0),
            zIndex: null,
            boxStyle: { background: "url('assets/infoBox/tipbox.gif') no-repeat"
                ,opacity: 0.75
                ,width: "500px" },
            closeBoxMargin: "10px 2px 2px 2px",
            closeBoxURL: "assets/infoBox/close.gif",
            infoBoxClearance: new google.maps.Size(1, 1),
            isHidden: false,
            pane: "floatPane",
            enableEventPropagation: false
        }

        openedBox = new InfoBox(myOptions);
        openedBox.open(window.__map, temporalMarker);
    }

    emptyParcelaClicked = function(point){
        showSearchInfobox(getParcelaLatLong(point));
    }

    parcelaClicked = function(parcela, e){
        if(typeof(clickedElement) !== 'undefined' && clickedElement != null){
            clickedElement.style("stroke", "orange");
            clickedElement.style("fill", "orange");
        }

        clickedElement = d3.select(this);

        clickedElement.style("stroke", "blue");
        clickedElement.style("fill", "blue");

        showParcelaInfoBox(parcela, getParcelaLatLong(parcela));
    }

    getParcelaLatLong = function(parcela){
        return new google.maps.LatLng(parcela.geometry.coordinates[0][0][1], parcela.geometry.coordinates[0][0][0] - 0.0006);
    }

    drawParcelasOverGoogleMap = function(geoJson){
        setIsRendering(true);

        var $map = $("#map");
        var that = this;

        window.__map = new google.maps.Map($map[0], {
            zoom: getCurrentZoomLevel(),
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            center: getMapCenter(),
            styles:[{"stylers": [{"saturation": -75},{"lightness": 75}]}]
        });

        var overlay = new google.maps.OverlayView();
        overlay.onAdd = function () {

            var layer = d3.select(this.getPanes().overlayMouseTarget).append("div").attr("class", "SvgOverlay");
            var svg = layer.append("svg");
            var adminDivisions = svg.append("g").attr("class", "AdminDivisions");

            overlay.draw = function () {
                var markerOverlay = this;
                var overlayProjection = markerOverlay.getProjection();

                // Turn the overlay projection into a d3 projection
                var googleMapProjection = function (coordinates) {
                    var googleCoordinates = new google.maps.LatLng(coordinates[1] + 0.0005, coordinates[0] - 0.0006);
                    var pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
                    return [pixelCoordinates.x + 4000, pixelCoordinates.y + 4000];
                }

                path = d3.geo.path().projection(googleMapProjection);
                adminDivisions.selectAll("path")
                        .data(geoJson.features)
                        .attr("d", path) // update existing paths
                        .enter().append("svg:path")
                        .attr("d", path)
                        .on("click", parcelaClicked);

                google.maps.event.addDomListener(document.getElementsByTagName("path"), 'click', function(event) {
                    google.maps.event.trigger(window.__map, 'click', event);
                });
            };
        };

        google.maps.event.addListener(window.__map, 'idle', function() {

            if(getIsRendering()){
                setIsRendering(false);
                return;
            }

            if (getIsMapDragging()) {
                setIdleSkipped(true);
                return;
            }

            setIdleSkipped(false);
            mapViewPortChanged(window.__map);
        });

        google.maps.event.addListener(window.__map, 'dragstart', function() {
            setIsMapDragging(true);
        });

        google.maps.event.addListener(window.__map, 'dragend', function() {
            setIsMapDragging(false);
            if (getIdleSkipped() == true) {

                mapViewPortChanged(window.__map);
                setIdleSkipped(false);
            }
        });

        google.maps.event.addListener(window.__map, 'bounds_changed', function() {
            setIdleSkipped(false);
        });

        overlay.setMap(window.__map);

        google.maps.event.addDomListener(window.__map, 'click', function(event, e, s) {
            // Complete with search infobox invocation
        });

        $("#loading").hide();
    }

    mapViewPortChanged = function(map){
        var centerLatLong = map.getCenter();
        var zoomLevel = map.getZoom();

        setCurrentMapCenter(centerLatLong);
        setCurrentZoomLevel(zoomLevel);

        //$.getJSON(parcelasEndpoint(), drawParcelasOverGoogleMap);
    };

    setCurrentZoomLevel = function(zoomLevel){
        currentZoomLevel = zoomLevel;
    }

    setCurrentMapCenter = function(center){
        currentMapCenter = center;
    }

    getCurrentMapCenter = function(){
        return currentMapCenter;
    }

    getCurrentZoomLevel = function(){
        return currentZoomLevel;
    }

    getIdleSkipped = function(){
        return idleSkipped;
    }

    setIdleSkipped = function(value){
        idleSkipped = value;
    }

    getIsMapDragging = function(){
        return isMapDragging;
    }

    setIsMapDragging = function(value){
        isMapDragging = value;
    }

    getMapCenter = function(){
        return buenosAiresLocation;
    }


    return {
        init : function(){
            $.getJSON(parcelasEndpoint(), drawParcelasOverGoogleMap);
        },

         drawOverGoogleMap : function(geoJson){
             drawParcelasOverGoogleMap(geoJson);
         }
    };
}();